// <auto-generated />
using System;
using Infrastructure.Contexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Infrastructure.Migrations
{
    [DbContext(typeof(CodeFirstDbContext))]
    partial class CodeFirstDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Infrastructure.Entities.AppointmentEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("AppointmentDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("AppointmentDetails")
                        .IsRequired()
                        .HasColumnType("nvarchar(MAX)");

                    b.Property<int>("DoctorId")
                        .HasColumnType("int");

                    b.Property<int>("PatientId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Appointments");
                });

            modelBuilder.Entity("Infrastructure.Entities.AuthenticationEntity", b =>
                {
                    b.Property<int>("PersonId")
                        .HasColumnType("int");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(64)");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("nvarchar(64)");

                    b.HasKey("PersonId");

                    b.HasIndex("UserName")
                        .IsUnique();

                    b.ToTable("Authentications");

                    b.HasData(
                        new
                        {
                            PersonId = 3,
                            Password = "asdtasd",
                            UserName = "tastast"
                        },
                        new
                        {
                            PersonId = 4,
                            Password = "asdtasdt",
                            UserName = "tasdt"
                        });
                });

            modelBuilder.Entity("Infrastructure.Entities.PersonEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("Created")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("Updated")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Persons");

                    b.HasData(
                        new
                        {
                            Id = -2,
                            Active = true,
                            Created = new DateTime(2024, 1, 17, 15, 45, 1, 587, DateTimeKind.Utc).AddTicks(1981)
                        },
                        new
                        {
                            Id = -3,
                            Active = true,
                            Created = new DateTime(2024, 1, 17, 15, 45, 1, 587, DateTimeKind.Utc).AddTicks(1986)
                        });
                });

            modelBuilder.Entity("Infrastructure.Entities.PersonProfileEntity", b =>
                {
                    b.Property<int>("ProfileId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProfileId"));

                    b.Property<bool>("ActivePrescriptions")
                        .HasColumnType("bit");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(64)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(64)");

                    b.Property<DateTime?>("LastVisit")
                        .HasColumnType("datetime2");

                    b.Property<int>("PersonId")
                        .HasColumnType("int");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("PostalCode")
                        .IsRequired()
                        .HasColumnType("varchar(7)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.Property<string>("SocialSecurityNo")
                        .IsRequired()
                        .HasColumnType("varchar(13)");

                    b.Property<string>("StreetName")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("ProfileId");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("PersonId")
                        .IsUnique();

                    b.HasIndex("RoleId");

                    b.HasIndex("SocialSecurityNo")
                        .IsUnique();

                    b.ToTable("PersonProfiles");

                    b.HasData(
                        new
                        {
                            ProfileId = 1,
                            ActivePrescriptions = true,
                            City = "Toarp",
                            Country = "Polski",
                            Email = "Hassan.A@gmail.com",
                            FirstName = "Hassan",
                            LastName = "Al-Heidari",
                            LastVisit = new DateTime(2024, 1, 16, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PersonId = -2,
                            PhoneNumber = "1234567890",
                            PostalCode = "24550",
                            RoleId = 3,
                            SocialSecurityNo = "987654321",
                            StreetName = "Toarpsvägen"
                        },
                        new
                        {
                            ProfileId = 2,
                            ActivePrescriptions = true,
                            City = "Blentarp",
                            Country = "Deutsch",
                            Email = "Ted.P@gmail.com",
                            FirstName = "Ted",
                            LastName = "Pieplow",
                            LastVisit = new DateTime(2024, 1, 16, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PersonId = -3,
                            PhoneNumber = "0022334455",
                            PostalCode = "27450",
                            RoleId = 2,
                            SocialSecurityNo = "880330",
                            StreetName = "Vildsvinsvägen"
                        });
                });

            modelBuilder.Entity("Infrastructure.Entities.PrescriptionEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("DoctorId")
                        .HasColumnType("int");

                    b.Property<int>("PatientId")
                        .HasColumnType("int");

                    b.Property<string>("PrescriptionDetails")
                        .IsRequired()
                        .HasColumnType("nvarchar(MAX)");

                    b.HasKey("Id");

                    b.HasIndex("DoctorId");

                    b.HasIndex("PatientId");

                    b.ToTable("Prescriptions");
                });

            modelBuilder.Entity("Infrastructure.Entities.RoleEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("nvarchar(24)");

                    b.HasKey("Id");

                    b.HasIndex("Role")
                        .IsUnique();

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Role = "Admin"
                        },
                        new
                        {
                            Id = 2,
                            Role = "Doctor"
                        },
                        new
                        {
                            Id = 3,
                            Role = "Patient"
                        });
                });

            modelBuilder.Entity("Infrastructure.Entities.PersonProfileEntity", b =>
                {
                    b.HasOne("Infrastructure.Entities.PersonEntity", "Person")
                        .WithOne("PersonProfile")
                        .HasForeignKey("Infrastructure.Entities.PersonProfileEntity", "PersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Infrastructure.Entities.RoleEntity", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Person");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("Infrastructure.Entities.PrescriptionEntity", b =>
                {
                    b.HasOne("Infrastructure.Entities.PersonEntity", "Doctor")
                        .WithMany()
                        .HasForeignKey("DoctorId")
                        .IsRequired();

                    b.HasOne("Infrastructure.Entities.PersonEntity", "Patient")
                        .WithMany()
                        .HasForeignKey("PatientId")
                        .IsRequired();

                    b.Navigation("Doctor");

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("Infrastructure.Entities.PersonEntity", b =>
                {
                    b.Navigation("PersonProfile")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
